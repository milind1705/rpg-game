/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState, useEffect } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useThree, useFrame } from "react-three-fiber";
export default function Model({ ...props }) {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF("/girl.glb");
  const [action, setAction] = useState("standAlone");
  const { actions } = useAnimations(animations, group);

  const previousAction = usePrevious(action);
  useFrame(() => {
    if (action == "walk") group.current.translateZ(0.01);
    if (action == "running") group.current.translateZ(0.07);
    window.addEventListener("keydown", (e) => {
      if (e.key === "ArrowLeft") {
        group.current.rotation.y += Math.PI /6
      };
      if (e.key === "ArrowRight") {
        group.current.rotation.y += Math.PI /6
      }
      if (e.key === "ArrowDown") {
        group.current.rotation.y += Math.PI /2
      }
    });
    

  }, [action]);
  const animatingEvent = () => {
    window.addEventListener("keydown", (e) => {
      if (e.key === "ArrowUp") {
        setAction("walk");
      }
      if (e.key === "r") {
        setAction("running");
      }
    });
  };

  const stopAnimation = () => {
    window.addEventListener("keyup", (e) => {
      setAction("standAlone");
    });
  };
  animatingEvent();
  stopAnimation();
  useEffect(() => {
    if (previousAction) {
      actions[previousAction].fadeOut(0.2);
      actions[action].stop();
    }
    actions[action].play();
    actions[action].fadeIn(0.2);
  }, [actions, action, previousAction]);
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorigHips} />
          <skinnedMesh
            name="Ch46"
            geometry={nodes.Ch46.geometry}
            material={materials.Ch46_body}
            skeleton={nodes.Ch46.skeleton}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/girl.glb");

function usePrevious(val) {
  const ref = useRef();
  useEffect(() => {
    ref.current = val;
  }, [val]);

  return ref.current;
}
